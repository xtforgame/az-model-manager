import { Model, ModelAttributeColumnReferencesOptions } from 'sequelize';
import { ModelOptions, ModelAttributeColumnOptions } from '../../../core/utils';
import { AssociationTypeHasOne, AssociationTypeHasMany, AssociationTypeBelongsTo, AssociationTypeBelongsToMany, HasOneOptions, HasManyOptions, BelongsToOptions, BelongsToManyOptions, AssociationColumnExtraOption } from '../../../core/columnTypes';
import { AmmSchemasModelOptions, Overwrite } from '../../../core';
export declare type JsonModelAttributeHasOne = [
    AssociationTypeHasOne,
    string,
    HasOneOptions,
    AssociationColumnExtraOption?
];
export declare type JsonModelAttributeHasMany = [
    AssociationTypeHasMany,
    string,
    HasManyOptions,
    AssociationColumnExtraOption?
];
export declare type JsonModelAttributeBelongsTo = [
    AssociationTypeBelongsTo,
    string,
    BelongsToOptions,
    AssociationColumnExtraOption?
];
export declare type JsonModelAttributeBelongsToMany = [
    AssociationTypeBelongsToMany,
    string,
    BelongsToManyOptions,
    AssociationColumnExtraOption?
];
export declare type JsonModelTypeInteger = 'integer';
export declare type JsonModelAttributeInteger = JsonModelTypeInteger | [
    JsonModelTypeInteger
];
export declare type JsonModelTypeBigint = 'bigint';
export declare type JsonModelAttributeBigint = JsonModelTypeBigint | [
    JsonModelTypeBigint
];
export declare type JsonModelTypeDecimal = 'decimal';
export declare type JsonModelAttributeDecimal = JsonModelTypeDecimal | [
    JsonModelTypeDecimal,
    number?,
    number?
];
export declare type JsonModelTypeReal = 'real';
export declare type JsonModelAttributeReal = JsonModelTypeReal | [
    JsonModelTypeReal
];
export declare type JsonModelTypeFloat = 'float';
export declare type JsonModelAttributeFloat = JsonModelTypeFloat | [
    JsonModelTypeFloat
];
export declare type JsonModelTypeDouble = 'double';
export declare type JsonModelAttributeDouble = JsonModelTypeDouble | [
    JsonModelTypeDouble
];
export declare type JsonModelTypeBoolean = 'boolean';
export declare type JsonModelAttributeBoolean = JsonModelTypeBoolean | [
    JsonModelTypeBoolean
];
export declare type JsonModelTypeString = 'string';
export declare type JsonModelAttributeString = JsonModelTypeString | [
    JsonModelTypeString,
    number?
];
export declare type JsonModelTypeBinary = 'binary';
export declare type JsonModelAttributeBinary = JsonModelTypeBinary | [
    JsonModelTypeBinary
];
export declare type JsonModelTypeText = 'text';
export declare type JsonModelAttributeText = JsonModelTypeText | [
    JsonModelTypeText
];
export declare type JsonModelTypeDate = 'date';
export declare type JsonModelAttributeDate = JsonModelTypeDate | [
    JsonModelTypeDate
];
export declare type JsonModelTypeDateOnly = 'dateonly';
export declare type JsonModelAttributeDateOnly = JsonModelTypeDateOnly | [
    JsonModelTypeDateOnly
];
export declare type JsonModelTypeUuid = 'uuid';
export declare type JsonModelAttributeUuid = JsonModelTypeUuid | [
    JsonModelTypeUuid
];
export declare type JsonModelTypeRange = 'range';
export declare type JsonModelAttributeRange = [
    JsonModelTypeRange,
    JsonModelTypeInteger | JsonModelTypeBigint | JsonModelTypeDecimal | JsonModelTypeDate | JsonModelTypeDateOnly
];
export declare type JsonModelTypeJson = 'json';
export declare type JsonModelAttributeJson = JsonModelTypeJson | [
    JsonModelTypeJson
];
export declare type JsonModelTypeJsonb = 'jsonb';
export declare type JsonModelAttributeJsonb = JsonModelTypeJsonb | [
    JsonModelTypeJsonb
];
export declare type JsonModelAttributeColumn = JsonModelAttributeHasOne | JsonModelAttributeHasMany | JsonModelAttributeBelongsTo | JsonModelAttributeBelongsToMany | JsonModelAttributeInteger | JsonModelAttributeDecimal | JsonModelAttributeReal | JsonModelAttributeFloat | JsonModelAttributeDouble | JsonModelAttributeBigint | JsonModelAttributeBoolean | JsonModelAttributeString | JsonModelAttributeBinary | JsonModelAttributeText | JsonModelTypeDate | JsonModelTypeDateOnly | JsonModelAttributeUuid | JsonModelAttributeRange | JsonModelTypeJson | JsonModelTypeJsonb;
export declare const deferrableMap: {
    [s: string]: any;
};
export declare const toSqlzDeferrable: (text: 'initially_immediate' | 'initially_deferred' | 'not') => any | void;
export declare type AmmModelAttributeColumnReferencesOptions = Overwrite<ModelAttributeColumnReferencesOptions, {
    model?: string;
    key?: string;
    deferrable?: 'initially_immediate' | 'initially_deferred' | 'not';
    autogenerated?: boolean;
}>;
export interface JsonModelAttributeColumnOptions<M extends Model = Model> {
    type: JsonModelAttributeColumn;
    ammReferences?: AmmModelAttributeColumnReferencesOptions;
}
export declare type JsonModelAttributeInOptionsForm<M extends Model = Model, TCreationAttributes = any, CEO = any> = Overwrite<ModelAttributeColumnOptions<M, CEO>, JsonModelAttributeColumnOptions<M>>;
export declare type NormalizedJsonModelAttributes<M extends Model = Model, TCreationAttributes = any, CEO = any> = {
    [name in keyof TCreationAttributes]: JsonModelAttributeInOptionsForm<M, TCreationAttributes, CEO>;
};
export declare type JsonModelAllAttributeType<M extends Model = Model, TCreationAttributes = any, CEO = any> = JsonModelAttributeInOptionsForm<M, TCreationAttributes, CEO> | JsonModelAttributeColumn;
export declare type JsonModelAttributes<M extends Model = Model, TCreationAttributes = any, CEO = any> = {
    [name in keyof TCreationAttributes]: JsonModelAllAttributeType<M, TCreationAttributes, CEO>;
};
export declare type IJsonSchema<ModelExtraOptions = any, CEO = any> = {
    columns: JsonModelAttributes<any, any, CEO>;
    options?: ModelOptions;
    extraOptions?: ModelExtraOptions;
};
export declare type IJsonSchemasModelOptions<ModelExtraOptions = any, ExtraOptions = any> = AmmSchemasModelOptions & {
    tablePrefix?: string;
};
export declare type IJsonSchemasOptions<ModelExtraOptions = any, ExtraOptions = any> = {
    model?: IJsonSchemasModelOptions<ModelExtraOptions, ExtraOptions>;
    associationModel?: IJsonSchemasModelOptions<ModelExtraOptions, ExtraOptions>;
};
export declare type IJsonSchemas<ModelExtraOptions = any, ExtraOptions = any, CEO = any> = {
    models: {
        [s: string]: IJsonSchema<ModelExtraOptions, CEO>;
    };
    associationModels: {
        [s: string]: IJsonSchema<ModelExtraOptions, CEO>;
    };
    options?: IJsonSchemasOptions<ModelExtraOptions, ExtraOptions>;
    extraOptions?: ExtraOptions;
};
